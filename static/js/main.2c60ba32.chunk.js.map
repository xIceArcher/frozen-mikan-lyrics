{"version":3,"sources":["songList.js","utils/index.js","components/Sidebar.js","constants/index.js","components/SongMetadata.js","components/MainPanel.js","components/App.js","serviceWorker.js","index.js"],"names":["songList","Aqours","composer","arranger","writer","kanjiName","englishName","Kutsuhimo","Clover","noCapitalise","toReadable","str","split","map","word","includes","length","toUpperCase","substring","capitaliseFirst","join","Sidebar","onSelect","theme","mode","Object","entries","artist","artistSongList","key","title","type","keys","song","Item","to","toLowerCase","SONG_METADATA_PROPERTIES","SongMetadata","songName","songListWithoutArtist","values","value","style","margin","className","index","property","MainPanel","useState","enLines","setEnLines","kanjiLines","setKanjiLines","enPath","process","kanjiPath","defaultDisplayOptions","checkedList","setCheckedList","useEffect","a","fetch","file","text","fileText","Group","options","onChange","list","span","line","idx","App","Sider","Layout","Content","Footer","collapsed","setCollapsed","minHeight","collapsible","onCollapse","path","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c60ba32.chunk.js","sourcesContent":["const songList = {\r\n  Aqours: {\r\n    \"Deep Resonance\": {\r\n      composer: \"Kuwabara Satoru (Arte Refact)\",\r\n      arranger: \"Sakai Takuya (Arte Refact)\",\r\n      writer: \"Hata Aki\"\r\n    }\r\n  },\r\n  \"Saito Shuka\": {\r\n    \"Kotoba no Mahou\": {\r\n      kanjiName: \"ことばの魔法\",\r\n      englishName: \"The Magic of Words\",\r\n      composer: \"Hayashi Kei (LIVE LAB.)\",\r\n      arranger: \"Murata Yuichi (LIVE LAB.)\",\r\n      writer: \"Hayashi Kei (LIVE LAB.)\"\r\n    },\r\n    \"Ato Ichi Meetoru\": {\r\n      kanjiName: \"あと一メートル\",\r\n      englishName: \"One More Metre\",\r\n      composer: \"Hayashi Kei (LIVE LAB.)\",\r\n      arranger: \"Horie Shouta\",\r\n      writer: \"Hayashi Kei (LIVE LAB.)\"\r\n    },\r\n    Kutsuhimo: {\r\n      kanjiName: \"くつひも\",\r\n      englishName: \"Shoelaces\",\r\n      composer: \"Nio\",\r\n      arranger: \"sugarbeans\",\r\n      writer: \"Hayashi Kei (LIVE LAB.)\"\r\n    }\r\n  },\r\n  \"Kusunoki Tomori\": {\r\n    \"Nagame no Sora\": {\r\n      kanjiName: \"眺めの空\",\r\n      englishName: \"The Sky that I Look Up To\",\r\n      composer: \"Kusunoki Tomori\",\r\n      arranger: \"Tada Sanyou\",\r\n      writer: \"Kusunoki Tomori\"\r\n    },\r\n    Clover: {\r\n      kanjiName: \"クローバー\",\r\n      composer: \"Kusunoki Tomori\",\r\n      arranger: \"Tada Sanyou\",\r\n      writer: \"Kusunoki Tomori\"\r\n    }\r\n  }\r\n};\r\n\r\nexport default songList;\r\n","const noCapitalise = [\"no\", \"wa\", \"de\", \"o\", \"ni\"];\r\n\r\nconst capitaliseFirst = str =>\r\n  noCapitalise.includes(str) || str.length === 0\r\n    ? str\r\n    : str[0].toUpperCase() + str.substring(1, str.length);\r\n\r\nexport const toUnderscore = str =>\r\n  str\r\n    .split(\" \")\r\n    .map(word => word.toLowerCase())\r\n    .join(\"_\");\r\n\r\nexport const toReadable = str =>\r\n  str\r\n    .split(\"_\")\r\n    .map(word => capitaliseFirst(word))\r\n    .join(\" \");\r\n","import React from \"react\";\r\nimport { Menu, Icon } from \"antd\";\r\nimport { Link } from \"@reach/router\";\r\n\r\nimport songList from \"../songList\";\r\nimport SubMenu from \"antd/lib/menu/SubMenu\";\r\nimport { toUnderscore } from \"../utils\";\r\n\r\nconst Sidebar = ({ onSelect }) => {\r\n  return (\r\n    <Menu theme=\"dark\" mode=\"inline\" onSelect={onSelect}>\r\n      {Object.entries(songList).map(([artist, artistSongList]) => (\r\n        <SubMenu\r\n          key={artist}\r\n          title={\r\n            <span>\r\n              <Icon type=\"user\" />\r\n              <span>{artist}</span>\r\n            </span>\r\n          }\r\n        >\r\n          {Object.keys(artistSongList).map(song => (\r\n            <Menu.Item key={song}>\r\n              <Link to={`frozen-mikan-lyrics/songs/${toUnderscore(song)}`}>\r\n                <Icon type=\"audio\" />\r\n                <span>{song}</span>\r\n              </Link>\r\n            </Menu.Item>\r\n          ))}\r\n        </SubMenu>\r\n      ))}\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","export const SONG_METADATA_PROPERTIES = {\r\n  kanjiName: \"\",\r\n  englishName: \"\",\r\n  composer: \"Composed by: \",\r\n  arranger: \"Arranged by: \",\r\n  writer: \"Written by: \"\r\n};\r\n","import React from \"react\";\r\n\r\nimport songList from \"../songList\";\r\nimport { toReadable } from \"../utils\";\r\nimport { SONG_METADATA_PROPERTIES } from \"../constants\";\r\n\r\nconst SongMetadata = ({ songName }) => {\r\n  const songListWithoutArtist = {};\r\n\r\n  for (const song of Object.values(songList)) {\r\n    for (const [key, value] of Object.entries(song)) {\r\n      songListWithoutArtist[key] = value;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ margin: \"10px\" }}>\r\n      <h1 className=\"romajiTitle\">{toReadable(songName)}</h1>\r\n      {Object.entries(songListWithoutArtist[toReadable(songName)]).map(\r\n        ([property, value], index) => (\r\n          <div key={index} className={property}>{`${\r\n            SONG_METADATA_PROPERTIES[property]\r\n          }${value}`}</div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SongMetadata;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col, Checkbox } from \"antd\";\r\n\r\nimport SongMetadata from \"./SongMetadata\";\r\n\r\nconst MainPanel = ({ songName, style }) => {\r\n  const [enLines, setEnLines] = useState([]);\r\n  const [kanjiLines, setKanjiLines] = useState([]);\r\n\r\n  const enPath = `${process.env.PUBLIC_URL}/songs/english/${songName}.txt`;\r\n  const kanjiPath = `${process.env.PUBLIC_URL}/songs/kanji/${songName}.txt`;\r\n\r\n  const defaultDisplayOptions = [\"Kanji\", \"English\"];\r\n  const [checkedList, setCheckedList] = useState(defaultDisplayOptions);\r\n\r\n  const onChange = list => {\r\n    setCheckedList(list);\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async function() {\r\n      const file = await fetch(enPath);\r\n      const fileText = await file.text();\r\n      setEnLines(fileText.split(/ *\\r?\\n/));\r\n    })();\r\n  }, [songName, enPath]);\r\n\r\n  useEffect(() => {\r\n    (async function() {\r\n      const file = await fetch(kanjiPath);\r\n      const fileText = await file.text();\r\n      setKanjiLines(fileText.split(/ *\\r?\\n/));\r\n    })();\r\n  }, [songName, kanjiPath]);\r\n\r\n  return (\r\n    <div>\r\n      <Row style={style}>\r\n        <SongMetadata songName={songName} />\r\n      </Row>\r\n      <Row style={style}>\r\n        <Checkbox.Group\r\n          options={defaultDisplayOptions}\r\n          value={checkedList}\r\n          onChange={onChange}\r\n        />\r\n      </Row>\r\n      <Row>\r\n        {checkedList.includes(\"Kanji\") && (\r\n          <Col span={24 / checkedList.length} style={style}>\r\n            {kanjiLines.map((line, idx) => (\r\n              <div key={idx}>{line === \"\" ? <br /> : line}</div>\r\n            ))}\r\n          </Col>\r\n        )}\r\n        {checkedList.includes(\"English\") && (\r\n          <Col span={24 / checkedList.length} style={style}>\r\n            {enLines.map((line, idx) => (\r\n              <div key={idx}>{line === \"\" ? <br /> : line}</div>\r\n            ))}\r\n          </Col>\r\n        )}\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainPanel;\r\n","import React, { useState } from \"react\";\nimport { Layout } from \"antd\";\nimport { Router } from \"@reach/router\";\nimport \"./App.css\";\n\nimport Sidebar from \"./Sidebar\";\nimport MainPanel from \"./MainPanel\";\n\nconst App = () => {\n  const { Sider, Content, Footer } = Layout;\n  const [collapsed, setCollapsed] = useState(false);\n\n  const onCollapse = () => {\n    setCollapsed(!collapsed);\n  };\n\n  return (\n    <Layout style={{ minHeight: \"100vh\" }}>\n      <Sider collapsible onCollapse={onCollapse}>\n        <Sidebar collapsed={collapsed} />\n      </Sider>\n      <Layout>\n        <Content style={{ margin: \"0 16px\" }}>\n          <Router>\n            <MainPanel\n              path=\"frozen-mikan-lyrics/songs/:songName\"\n              style={{ textAlign: \"center\" }}\n            />\n          </Router>\n        </Content>\n        <Footer />\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}